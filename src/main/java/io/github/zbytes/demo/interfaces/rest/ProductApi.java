/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.github.zbytes.demo.interfaces.rest;

import io.github.zbytes.demo.interfaces.rest.dto.Product;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-11-29T10:28:17.922+05:45[Asia/Kathmandu]")

@Api(value = "Product", description = "the Product API")
public interface ProductApi {

    /**
     * POST /products : Created product
     * This can only be done by the logged in product.
     *
     * @param product Created product object (required)
     * @return OK (status code 200)
     *         or Invalid product supplied (status code 400)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Created product", nickname = "createProduct", notes = "This can only be done by the logged in product.", authorizations = {
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "write:products", description = "modify or remove products")
            })
    }, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid product supplied"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/products",
        consumes = "application/json",
        method = RequestMethod.POST)
    Mono<ResponseEntity<Void>> createProduct(@ApiParam(value = "Created product object" ,required=true )   @RequestBody Mono<Product> product, ServerWebExchange exchange);


    /**
     * DELETE /products/{productId} : Deleted product
     * This can only be done by the logged in product.
     *
     * @param productId The id that needs to be deleted (required)
     * @return OK (status code 200)
     *         or Product not found (status code 404)
     */
    @ApiOperation(value = "Deleted product", nickname = "deleteProduct", notes = "This can only be done by the logged in product.", authorizations = {
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "write:products", description = "modify or remove products")
            })
    }, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Product not found") })
    @RequestMapping(value = "/products/{productId}",
        method = RequestMethod.DELETE)
    Mono<ResponseEntity<Void>> deleteProduct(@ApiParam(value = "The id that needs to be deleted",required=true) @PathVariable("productId") String productId, ServerWebExchange exchange);


    /**
     * GET /products/{productId} : Get product by product id
     * Some description of the operation. You can use &#x60;markdown&#x60; here. 
     *
     * @param productId The id that needs to be fetched (required)
     * @return Success (status code 200)
     *         or Forbidden (status code 403)
     *         or Product not found (status code 404)
     */
    @ApiOperation(value = "Get product by product id", nickname = "getProductById", notes = "Some description of the operation. You can use `markdown` here. ", response = Product.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "read:products", description = "read products info")
            })
    }, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Product.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Product not found") })
    @RequestMapping(value = "/products/{productId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    Mono<ResponseEntity<Product>> getProductById(@ApiParam(value = "The id that needs to be fetched",required=true) @PathVariable("productId") String productId, ServerWebExchange exchange);


    /**
     * GET /products : Get products
     * Some description of the operation. You can use &#x60;markdown&#x60; here. 
     *
     * @param page The page that needs to be fetched (required)
     * @param size The size that needs to be fetched (required)
     * @param sort The sort that needs to be fetched (optional)
     * @return Success (status code 200)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Get products", nickname = "getProducts", notes = "Some description of the operation. You can use `markdown` here. ", response = Product.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "read:products", description = "read products info")
            })
    }, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Product.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/products",
        produces = "application/json", 
        method = RequestMethod.GET)
    Mono<ResponseEntity<Flux<Product>>> getProducts(@ApiParam(value = "The page that needs to be fetched", required = true)  @RequestParam(value = "page", required = true) Integer page,@ApiParam(value = "The size that needs to be fetched", required = true)  @RequestParam(value = "size", required = true) Integer size,@ApiParam(value = "The sort that needs to be fetched")  @RequestParam(value = "sort", required = false) String sort, ServerWebExchange exchange);


    /**
     * PUT /products/{productId} : Updated product
     * This can only be done by the logged in product.
     *
     * @param product Updated product object (required)
     * @param productId The id that needs to be updated (required)
     * @return OK (status code 200)
     *         or Invalid product supplied (status code 400)
     *         or Forbidden (status code 403)
     *         or Product not found (status code 404)
     */
    @ApiOperation(value = "Updated product", nickname = "updateProduct", notes = "This can only be done by the logged in product.", authorizations = {
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "write:products", description = "modify or remove products")
            })
    }, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid product supplied"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Product not found") })
    @RequestMapping(value = "/products/{productId}",
        consumes = "application/json",
        method = RequestMethod.PUT)
    Mono<ResponseEntity<Void>> updateProduct(@ApiParam(value = "Updated product object" ,required=true )   @RequestBody Mono<Product> product,@ApiParam(value = "The id that needs to be updated",required=true) @PathVariable("productId") String productId, ServerWebExchange exchange);

}
