/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.github.zbytes.demo.interfaces.rest;

import io.github.zbytes.demo.interfaces.rest.dto.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-11-29T11:22:35.830+05:45[Asia/Kathmandu]")

@Validated
@Api(value = "User", description = "the User API")
public interface UserApi {

    /**
     * POST /users : Created user
     * This can only be done by the logged in user.
     *
     * @param user Created user object (required)
     * @return OK (status code 200)
     *         or Invalid user supplied (status code 400)
     */
    @ApiOperation(value = "Created user", nickname = "createUser", notes = "This can only be done by the logged in user.", authorizations = {
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "write:users", description = "modify or remove users")
            })
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid user supplied") })
    @RequestMapping(value = "/users",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createUser(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody User user);


    /**
     * DELETE /users/{username} : Deleted user
     * This can only be done by the logged in user.
     *
     * @param username The name that needs to be deleted (required)
     * @return OK (status code 200)
     *         or User not found (status code 404)
     */
    @ApiOperation(value = "Deleted user", nickname = "deleteUser", notes = "This can only be done by the logged in user.", authorizations = {
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "write:users", description = "modify or remove users")
            })
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{username}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("username") String username);


    /**
     * GET /users/{username} : Get user by user name
     * Some description of the operation. You can use &#x60;markdown&#x60; here. 
     *
     * @param username The name that needs to be fetched (required)
     * @param withEmail Filter users without email (optional)
     * @return Success (status code 200)
     *         or Forbidden (status code 403)
     *         or User not found (status code 404)
     */
    @ApiOperation(value = "Get user by user name", nickname = "getUserByName", notes = "Some description of the operation. You can use `markdown` here. ", response = User.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "read:users", description = "read users info")
            })
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = User.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{username}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserByName(@ApiParam(value = "The name that needs to be fetched",required=true) @PathVariable("username") String username,@ApiParam(value = "Filter users without email") @Valid @RequestParam(value = "with_email", required = false) Boolean withEmail);


    /**
     * GET /users : Get users
     * Some description of the operation. You can use &#x60;markdown&#x60; here. 
     *
     * @param page The page that needs to be fetched (required)
     * @param size The size that needs to be fetched (required)
     * @param sort The sort that needs to be fetched (optional)
     * @return Success (status code 200)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Get users", nickname = "getUsers", notes = "Some description of the operation. You can use `markdown` here. ", response = User.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "read:users", description = "read users info")
            })
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUsers(@NotNull @ApiParam(value = "The page that needs to be fetched", required = true) @Valid @RequestParam(value = "page", required = true) Integer page,@NotNull @ApiParam(value = "The size that needs to be fetched", required = true) @Valid @RequestParam(value = "size", required = true) Integer size,@ApiParam(value = "The sort that needs to be fetched") @Valid @RequestParam(value = "sort", required = false) String sort);


    /**
     * PUT /users/{username} : Updated user
     * This can only be done by the logged in user.
     *
     * @param user Updated user object (required)
     * @param username The name that needs to be updated (required)
     * @return OK (status code 200)
     *         or Invalid user supplied (status code 400)
     *         or Forbidden (status code 403)
     *         or User not found (status code 404)
     */
    @ApiOperation(value = "Updated user", nickname = "updateUser", notes = "This can only be done by the logged in user.", authorizations = {
        @Authorization(value = "main_auth", scopes = {
            @AuthorizationScope(scope = "write:users", description = "modify or remove users")
            })
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid user supplied"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{username}",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody User user,@ApiParam(value = "The name that needs to be updated",required=true) @PathVariable("username") String username);

}
